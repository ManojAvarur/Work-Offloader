import { readdirSync, unlinkSync, readFileSync, existsSync } from 'fs';
import { config } from './settingsParser.js';
import { join } from 'path';
import { fileURLToPath } from 'url';
import moment from 'moment';
import { question } from 'readline-sync';


config();
const __dirname = fileURLToPath( new URL( '.', import.meta.url ) );
const logsLocation = join( __dirname, process.localSettings.LOGS_LOC );

/**
 * Scans for all the logs generated by anonymous execution
 * @returns {List<Logs>}  
 */
export function retriveAllLogs(){
    const logsList = {};

    if( !existsSync( logsLocation ) ){
        return logsList
    }

    readdirSync( logsLocation ).forEach( logCompleteName =>{ 
        const logNameSplit = logCompleteName.split('-');

        const expireDate = logNameSplit[ logNameSplit.length - 1 ].split('.')[0];
        const createdDate = logNameSplit[ logNameSplit.length - 2 ];
        const logId = logNameSplit.slice( 0, logNameSplit.length - 2 ).join('-');

        if( moment().unix() > expireDate ){
            unlinkSync( join( logsLocation, logCompleteName ) );
            return;
        }

        logsList[logId] = { logCompleteName, createdDate, expireDate };
    });

    return logsList;
}

/**
 * Displays the log for the specified log id
 * @param {UUIDv4} logId 
 */
export function displayLog( logId ){
    const log = retriveAllLogs()[logId];

    if( !log ){
        console.log(`\n\t---- No log found < Log Id : ${logId} > ----`);
        return;
    }

    console.log( '\n' + readFileSync( join( logsLocation, log.logCompleteName ) ).toString() );
}

/**
 * Deletes the log for the specified log id
 * @param {UUIDv4} logId 
 */
export function deleteLog( logId ){
    const log = retriveAllLogs()[logId];

    if( !log ){
        console.log(`\n\t---- No log found < Log Id : ${logId} > ----`);
        return;
    }

    const userInput = question('Are you sure you want to delete the log? [ yes | y | no | n ] : ');
    const userResponse = ['yes', 'y'].includes( userInput.toLowerCase() );

    if( !userResponse ){
        console.log('\n\t---- Job aborted ----');
        return;
    }

    unlinkSync( join( logsLocation, log.logCompleteName ) );
}

/**
 * Deletes all the logs
 */
export function deleteAllLogs(){
    const logsList = retriveAllLogs();

    if( Object.keys( logsList ).length < 0 ){
        console.log(`\n\t---- No log found < Log Id : ${logId} > ----`);
        return;
    }

    const userInput = question('Are you sure you want to delete all the logs? [ yes | y | no | n ] : ');
    const userResponse = ['yes', 'y'].includes( userInput.toLowerCase() );

    if( !userResponse ){
        console.log('\n\t---- Job aborted ----');
        return;
    }

    Object.keys( logsList ).forEach( ( logId, index ) => {
        unlinkSync( join( logsLocation, logsList[logId].logCompleteName ) );
    });
}

/**
 * Prints out the log information
 */
export function printLogNames(){
    const logsList = retriveAllLogs();

    if( Object.keys( logsList ).length <= 0 ){
        console.log('\n\t---- No Logs To Display ----');
        return;
    }

    console.log('\nSl No. \t Log Id \t\t\t\t Created Date \t\t\t Expire Date');
    console.log('------ \t ------  \t\t\t\t ------------ \t\t\t -----------');

    Object.keys( logsList ).forEach( ( value, index ) => {
        console.log(`${++index})\t ${value} \t ${moment.unix( logsList[value].createdDate ).format( process.localSettings.DATE_TIME_DISPLAY_FORMAT )} \t ${moment.unix( logsList[value].expireDate ).format( process.localSettings.DATE_TIME_DISPLAY_FORMAT )}`);
    })
}